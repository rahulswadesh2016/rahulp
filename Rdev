using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using static cusfun;


public static class Rp
{
    public static List<Dictionary<string, object>> ToDictionary(this DataTable dt)
    {
        List<Dictionary<string, object>> dictionaries = new List<Dictionary<string, object>>();
        foreach (DataRow row in dt.Rows)
        {
            Dictionary<string, object> dictionary = Enumerable.Range(0, dt.Columns.Count)
                .ToDictionary(i => dt.Columns[i].ColumnName, i => row.ItemArray[i]);
            dictionaries.Add(dictionary);
        }
        return dictionaries;
    }
}
public class Rdev
{
    cusfun cfun = new cusfun();


    public void connect(string con)
    {
        cfun.Con = con;
    }
    public SelectList ToSelect(DataTable table, string valueField, string textField)
    {
        List<SelectListItem> list = new List<SelectListItem>();

        list.Add(new SelectListItem { Text = "Select", Value = "" });
        if (table.Rows.Count > 0)
        {
            foreach (DataRow row in table.Rows)
            {
                list.Add(new SelectListItem()
                {
                    Text = row[textField].ToString(),
                    Value = row[valueField].ToString()
                });
            }
        }

        return new SelectList(list, "Value", "Text");
    }
    public DataTable ToTransp(DataTable inputTable)
    {
        DataTable outputTable = new DataTable();

        // Add columns by looping rows

        // Header row's first column is same as in inputTable
        outputTable.Columns.Add(inputTable.Columns[0].ColumnName.ToString());

        // Header row's second column onwards, 'inputTable's first column taken
        foreach (DataRow inRow in inputTable.Rows)
        {
            string newColName = inRow[0].ToString();
            outputTable.Columns.Add(newColName);
        }

        // Add rows by looping columns        
        for (int rCount = 1; rCount <= inputTable.Columns.Count - 1; rCount++)
        {
            DataRow newRow = outputTable.NewRow();

            // First column is inputTable's Header row's second column
            newRow[0] = inputTable.Columns[rCount].ColumnName.ToString();
            for (int cCount = 0; cCount <= inputTable.Rows.Count - 1; cCount++)
            {
                string colValue = inputTable.Rows[cCount][rCount].ToString();
                newRow[cCount + 1] = colValue;
            }
            outputTable.Rows.Add(newRow);
        }

        return outputTable;
    }
    public ArrayList ToArrayList(ref DataTable dt)
    {
        ArrayList converted = new ArrayList(dt.Rows.Count);
        foreach (DataRow row in dt.Rows)
        {
            converted.Add(row);
        }
        return converted;
    }

    
    public List<T> ToList<T>(DataTable dt)
    {
        List<T> data = new List<T>();
        foreach (DataRow row in dt.Rows)
        {
            T item = cfun.GetItem<T>(row);
            data.Add(item);
        }
        return data;
    }

    public string ToJSONString(DataTable table)
    {
        var JSONString = new StringBuilder();
        if (table.Rows.Count > 0)
        {
            JSONString.Append("[");
            for (int i = 0; i < table.Rows.Count; i++)
            {
                JSONString.Append("{");
                for (int j = 0; j < table.Columns.Count; j++)
                {
                    if (j < table.Columns.Count - 1)
                    {
                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                    }
                    else if (j == table.Columns.Count - 1)
                    {
                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                    }
                }
                if (i == table.Rows.Count - 1)
                {
                    JSONString.Append("}");
                }
                else
                {
                    JSONString.Append("},");
                }
            }
            JSONString.Append("]");
        }
        return JSONString.ToString();
    }


    public string ToJSONNet(DataTable table)
    {
        string JSONString = string.Empty;
        JSONString = JsonConvert.SerializeObject(table);
        return JSONString;
    }

    public string ToJSON(DataTable table)
    {
        JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
        List<Dictionary<string, object>> parentRow = new List<Dictionary<string, object>>();
        Dictionary<string, object> childRow;
        foreach (DataRow row in table.Rows)
        {
            childRow = new Dictionary<string, object>();
            foreach (DataColumn col in table.Columns)
            {
                childRow.Add(col.ColumnName, row[col]);
            }
            parentRow.Add(childRow);
        }
        return jsSerializer.Serialize(parentRow);
    }

    public T ToView<T>(DataRow row) where T : new()
    {
        // create a new object
        T item = new T();

        // set the item
        cfun.SetItemFromRow(item, row);

        // return 
        return item;
    }



    public DataSet FETCH_MASTER(string Condition1, string Condition2, string Condition3
        , string Condition4, string Condition5, string Condition6, string Condition7,
        string Condition8, string Condition9, string Condition10
        , string OnTable)
    {
        DataSet ds = new DataSet();
        Property p = new Property();
        p.Condition1 = Condition1;
        p.Condition2 = Condition2;
        p.Condition3 = Condition3;
        p.Condition4 = Condition4;
        p.Condition5 = Condition5;
        p.Condition6 = Condition6;
        p.Condition7 = Condition7;
        p.Condition8 = Condition8;
        p.Condition9 = Condition9;
        p.Condition10 = Condition10;
        p.OnTable = OnTable;
        ds = cfun.DS_FETCH_MASTER(p);
        return ds;
    }





}
